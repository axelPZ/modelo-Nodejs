
#Nota: pasos para crear el restServer con express

//SERVIDOR BASE
------------------------------------------------------------------

npm init -y			configura y creal el packe.json

				se crea el app.js punto de entrada de la app

npm i express			se instala express para las rutas https://www.npmjs.com/package/express

npm i dotenv			se instala dotenv para las variables de entorno https://www.npmjs.com/package/dotenv

				se https://www.npmjs.com/package/express y se copia el modelo

				se configuara el puerto en el .env

				se configura la parte del servidor por en el modelo

				se crea el primer middleware para especificar la carpeta publica 

npm i cors			se instala el cors para que se pueda accedera nuestro servidor

				se agrega el cors a los middleware https://www.npmjs.com/package/cors

				se crea la carpeta routes y el archivo que va a manejar( user ) y lo configuramos

				se crea el constructor y sus metodos luego se importa en las rutas y se llama sus metodos apartir de cada ruta

				configurar el server para que reciva la informacion en formato JSON, se agrega el los middleware



// MONGO ATLAS

				logearse
				elegir la opcion gratuita
				en Cluster Name le agregamos un nombre le damos en agregar
				creamos nuestro usuario y elegimos una contrasenia y antes de cerra la ventana
				agregamos el usuario y la passwor en los .env de nuestro rest server
				en seleccionamos "Read and write to ary database" y presionamos agregar


 Si nos da problemas al cargar la APP a heroku y no se conectar a mongo Atras

    				1) Deben ingresar a "MongoDB Atlas (desde el navegador).
    				2) Una vez que se hayan logueado con sus datos deben ir a su proyecto cargado en MongoDB (la BD de la cafetería).
    				3) En las opciones que aparecen en el lado izquierdo deben ir a la opción de "Security" -> "Network Access".
    				4) Modifican el "IP Access List", la IP que aparezca lo más seguro es que sea la de ustedes (por lo que tendría acceso restringido). En esa IP, al lado derecho, deben hacer clic en el botón de "edit". Cuando se abra el recuadro aparecerá un botón arriba que indicará que dan acceso de conexión desde cualquier lugar ( cambiando el IP Address a: 0.0.0.0/0 de forma automática ).
    				5) Esperan a que Atlas procese la solicitud y se dirigen a Heroku.
    				6) Deben resetear la conexión de Heroku al lado del botón que dice "Open App". En el botón que dice "More" -> "Restart all dynos".
    				7) Una vez reiniciado el servicio, prueben en Postman sus métodos en fase "Producción" con su URL de Heroku.
				
conectarse a la base de datos de gongoAtlas desde mongo deb atlas

				precionamos en connect elegimos una opcion: "ya tenemos mongoDBcompas" si ya lo tenemos
				compias la cadena de conexion = "MONGODB_CNN=mongodb+srv://<username>:<password>@miclustercafe.qi21x.mongodb.net/test"
				 editamos con nuestro usuario y contrasenia los campos de la cadena y por ultimo sustituimos el test por el nombre que le daremos a nuesta BD 
				vamos a mongocompas y agregamos la cadena despues del MONGODB_CNN=  y le damos en conectar

// SERVIDOR CON BASE DE DATOS MONGOOSE

npm install mongoose		instalar mongoose ver guia en https://mongoosejs.com/
			
				Se crea la carpeta de database y el archivo de configuracion y se configura la base de datos
				
				configuramos la coneccion en un asincrono en el modelo del servidor

// CREACION DE MODELOS

				en la carpeta modelo creamos el archivo del modelo de nuestro usuario y lo configuramos
			
				importamos el modelo en el controlador para utilizarlo para crear el CRUD del usuario
				
				agregamos el primer usuario de prueba

npm i bcryptjs			para encriptar la contrasenia

npm i express-validator		validar los campos
 
				importamos el check del expres-validator en las rutas

				creamos las validaciones de los campos que son obligatorios

				para validar que todo los campos se crearon correctamente, creamos la carpeta middleware y en el el archivo validateFilds 

				importamos el archivo en las rutas y lo ponemos al final de las validaciones

validar role con la BD

				creamos el campo role en BD y agregamos los roles permitidos luego creamos su modelo

				creamos la carpeta herlpers y ahi creamos un archivo donde estaran las validaciones que se usen contra la base de datos

				al campo del check del role( check('role') ) se le agrega el custom y el helper de la validacion = ( check('role').custom( validacion ),



				
